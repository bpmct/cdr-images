# ------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ------------------------------------------------------------

- name: Start AWS cluster
  hosts: localhost
  gather_facts: false
  vars:
     temp_dir: "{{ playbook_dir }}/../conf/instance"
     bin_dir: "{{ playbook_dir }}/../bin"
     inventory: "{{ temp_dir }}/inventory"
     ccconf: "{{ temp_dir }}/cc.conf"
     home_dir: "/home/{{ user }}"
     num_vols: "{{ ephemeral_volumes[instance_type]|default(0) }}"
  tasks:
    - include_vars: ../conf/aws_settings.yml
    - include_vars: ../conf/aws_types.yml

    - name: Clean the temporary directory
      file:
        path: "{{ temp_dir }}"
        state: absent

    - name: Create local temporary directory
      file:
        path: "{{ temp_dir }}"
        state: directory

    - name: Generate instance-store volumes for AWS instances
      shell: "{{ playbook_dir }}/../bin/gen_volumes.sh {{ num_vols }} {{ temp_dir }}/volumes.yml"

    - name: Load generated volumes
      include_vars: "{{ temp_dir }}/volumes.yml"

    - name: Launch all instances
      ec2:
        key_name: "{{ keypair }}"
        group: "{{ group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        wait: true
        region: "{{ region }}"
        aws_access_key: "{{ access_key_id }}"
        aws_secret_key: "{{ secret_access_key }}"
        count: "{{ count }}"
        instance_tags:
            Name: "{{ tag }}"
        volumes: "{{ vols }}"
      register: ec2

    - name: Set CC node
      set_fact:
        cc: "{{ ec2.instances[0] }}"

    - name: Populate CC to the cluster inventory file {{ inventory }}
      shell: printf "[cc]\n{{ cc.public_dns_name }}\n" > "{{ inventory }}"

    - name: Start the NC section in the cluster inventory file {{ inventory }}
      shell: printf "\n[ncs]\n" >> "{{ inventory }}"

    - name: Populate CC to the NC section (if needed) in the cluster configuration file "{{ ccconf }}"
      shell: printf "[cc]\n{{ cc.private_ip }}\n\n" > "{{ ccconf }}"
      when: cc_on_nc

    - name: Populate NCs to the cluster inventory file {{ inventory }}
      shell: printf "{{ node.1.public_dns_name }}\n" >> "{{ inventory }}"
      when: node.0 != 0
      with_indexed_items: "{{ ec2.instances }}"
      loop_control:
        loop_var: node

    - name: Populate NCs to the cluster inventory file {{ inventory }}
      shell: printf "\n[all:vars]\nansible_ssh_user={{ user }}\n" >> "{{ inventory }}"

    - name: Populate CC to the cluster configuration file "{{ ccconf }}"
      shell: printf "[cc]\naddress={{ cc.private_ip }}\n\n" > "{{ ccconf }}"

    - name: Populate NCs to the cluster configuration file
      shell: printf "[nc/1]\naddress={{ cc.private_ip }}\n\n" >> "{{ ccconf }}"
      when: cc_on_nc

    - set_fact:
        start: 0

    - set_fact:
        start: 1
      when: cc_on_nc

    - name: Populate NCs to the cluster configuration file
      shell: printf "[nc/{{ node.0 + start }}]\naddress={{ node.1.private_ip }}\n\n" >> "{{ ccconf }}"
      when: node.0 != 0
      with_indexed_items: "{{ ec2.instances }}"
      loop_control:
        loop_var: node

    - name: Populate the NC txnlogdir to the cluster configuration file {{ ccconf }}
      shell: printf "[nc]\ntxn.log.dir={{ home_dir }}/txnlog\n" >> "{{ ccconf }}"

    - name: Populate NC iodevices to the cluster configuration file {{ ccconf }}
      shell: printf "iodevices={{ home_dir }}/iodevice\n" >> "{{ ccconf }}"
      when: vols|length == 0

    - name: Generates multiple iodevice paths
      shell: printf "devices:\n" > "{{ temp_dir }}/devices"
      when: vols|length > 0

    - name: Populate multiple iodevices
      shell: printf "  - /data{{ vol.0 + 1 }}/iodevice\n" >> "{{ temp_dir }}/devices"
      with_indexed_items: "{{ vols }}"
      loop_control:
        loop_var: vol
      when: vols|length > 0

    - include_vars: "{{ temp_dir }}/devices"
      when: vols|length > 0

    - name: Populate multiple NC iodevices to the cluster configuration file {{ ccconf }}
      shell: printf "iodevices={{ devices| join(',') }}\n" >> "{{ ccconf }}"
      when: vols|length > 0

    - name: Populate the NC command to the cluster configuration file {{ ccconf }}
      shell: printf "command=asterixnc\n" >> "{{ ccconf }}"
